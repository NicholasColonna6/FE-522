df = read.table("RRVRUSQ156N.csv", header = TRUE)
setwd("C:Users/colon/Downloads")
df = read.table("RRVRUSQ156N.csv", header = TRUE)
setwd("C:Users/colon/Downloads")
getwd()
df = read.table("RRVRUSQ156N.csv", header = TRUE)
View(df)
df = read.table("RRVRUSQ156N.xls", header = TRUE)
View(df)
View(df)
df = read.table("RRVRUSQ156N.csv", header = TRUE)
View(df)
source('C:/Users/colon/Downloads/data help.R')
out <- cbind(out, splint(qtrly$rDate, qtrly[,names(qtrly)[i]] ,subset(mthly, rDate <= max(qtrly$rDate))$rDate ))
# Load list of symbols (Updated May 2017)
SYM <- as.character( read.csv('http://trading.chrisconlan.com/SPstocks_current.csv',
stringsAsFactors = FALSE, header = FALSE)[,1] )
# Make sure data.table is installed
if(!'data.table' %in% installed.packages()[,1]) install.packages('data.table')
# Function to fetch yahoo data
yahoo <- function(sym, current = TRUE,
a = 0, b = 1, c = 2000, d, e, f,
g = "d")
{
if(current){
system_time <- as.character(Sys.time())
f <- as.numeric(substr(system_time, start = 1, stop = 4))
d <- as.numeric(substr(system_time, start = 6, stop = 7)) - 1
e <- as.numeric(substr(system_time, start = 9, stop = 10))
}
require(data.table)
tryCatch(
suppressWarnings(
fread(paste0("http://ichart.yahoo.com/table.csv",
"?s=", sym,
"&a=", a,
"&b=", b,
"&c=", c,
"&d=", d,
"&e=", e,
"&f=", f,
"&g=", g,
"&ignore=.csv"), sep = ",")),
error = function(e) NULL
)
}
# Hold stock data and vector of invalid requests
DATA <- list()
INVALID <- c()
# Attempt to fetch each symbol
for(sym in SYM){
yahoo_return <- yahoo(sym)
if(!is.null(yahoo_return)) {
DATA[[sym]] <- yahoo_return
} else {
INVALID <- c(INVALID, sym)
}
}
# Overwrite with only valid symbols
SYM <- names(DATA)
# Remove iteration variables
rm(yahoo_return, sym)
cat("Successfully download", length(DATA), "symbols.")
cat(length(INVALID), "invalid symbols requested.\n", paste(INVALID, collapse = "\n\t"))
cat("We now have a list of data frames of each symbol.")
cat("e.g. access MMM price history with DATA[['MMM']]")
print(DATA[['MMM']])
# Load list of symbols (Updated May 2017)
symbols <- as.character( read.csv('http://trading.chrisconlan.com/SPstocks_current.csv', stringsAsFactors = FALSE, header = FALSE)[,1] )
install.packages("quantmod")
library(quantmod)
getSymbols('AAPL',from='2014-04-12', to='2019-04-12')
getSymbols(symbols,from='2014-04-12', to='2019-04-12')
View(COG)
tickers <- read.csv(file="C:Users/colon/Desktop/tickers.csv", header=TRUE, sep=",")
tickers <- read.csv(file="C:/Users/colon/Desktop/tickers.csv", header=TRUE, sep=",")
getSymbols('AAPL',from='2014-04-12', to='2019-04-12')[,6]
View(AAPL)
getSymbols('AAPL',from='2014-04-12', to='2019-04-12')[6]
stock <- getSymbols('AAPL',from='2014-04-12', to='2019-04-12')
ibrary(zoo)
library(tseries)
install.packages("zoo")
install.packages("tseries")
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
tickers <- read.csv(file="C:/Users/colon/Desktop/tickers.csv", header=TRUE, sep=",")
## specify time period
dateStart <- "2014-04-12"
dateEnd <- "2019-04-12"
## extract symbols and number of iterations
numTick <- length(tickers)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = tickers[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(tickers[1])
## download remaining assets in for loop
for (i in 2:numTick) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = tickers[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(tickers[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
write.zoo(z, file = "C:/Users/colon/Desktop/results.csv", index.name = "time")
install.packages("zoo")
install.packages("tseries")
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
tickers <- read.csv(file="C:/Users/colon/Desktop/tickers.csv", header=TRUE, sep=",")
## specify time period
dateStart <- "2014-04-12"
dateEnd <- "2019-04-12"
## extract symbols and number of iterations
numTick <- length(tickers)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = tickers[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(tickers[1])
## download remaining assets in for loop
for (i in 2:numTick) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = tickers[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(tickers[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
write.zoo(z, file = "C:/Users/colon/Desktop/results.csv", index.name = "time")
install.packages("zoo")
## download data on first stock as zoo object
z <- get.hist.quote(instrument = tickers[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
a
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
tickers <- read.csv(file="C:/Users/colon/Desktop/tickers.csv", header=TRUE, sep=",")
## specify time period
dateStart <- "2014-04-12"
dateEnd <- "2019-04-12"
## extract symbols and number of iterations
numTick <- length(tickers)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = tickers[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = tickers[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
get.hist.quote(instrument = 'AAPL', start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
get.hist.quote(instrument = 'AAPL', start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
tickers <- read.csv(file="C:/Users/colon/Desktop/tickers.csv", header=TRUE, sep=",")
## specify time period
dateStart <- "2014-04-12"
dateEnd <- "2019-04-12"
## extract symbols and number of iterations
numTick <- length(tickers)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = tickers[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(tickers[1])
View(tickers)
View(tickers)
View(tickers)
tickers[1]
tickers[1,1]
tickers[1,2]
tickers[1,3]
tickers[2,1]
tickers[1]
tickers[2]
tickers[2,1]
View(tickers)
tickers[2,]
tickers[6,]
## read in list of constituents, with company name in first column and
## ticker symbol in second column
tickers <- read.csv(file="C:/Users/colon/Desktop/tickers.csv", header=FALSE, sep=",")
tickers[1,]
## read in list of constituents, with company name in first column and
## ticker symbol in second column
tickers <- read.csv(file="C:/Users/colon/Desktop/tickers.csv", header=TRUE, sep=",")
tickers[1,]
print(tickers[1,])
print(tickers[1,1])
print(tickers[2,1])
print(tickers[2])
print(tickers[3])
## extract symbols and number of iterations
numTick <- length(tickers)
tickers[1,1]
## download data on first stock as zoo object
z <- get.hist.quote(instrument = tickers[1,1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
print(tickers[1,])
## download data on first stock as zoo object
z <- get.hist.quote(instrument = tickers[1,], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
symbols <- tickers[, 2]
symbols <- tickers[,1]
print(tickers[1])
## read in list of constituents, with company name in first column and
## ticker symbol in second column
symbols <- read.csv(file="C:/Users/colon/Desktop/tickers.csv", header=TRUE, sep=",")
tickers <- symbols[,1]
print(tickers[1])
## specify time period
dateStart <- "2014-04-12"
dateEnd <- "2019-04-12"
## extract symbols and number of iterations
numTick <- length(tickers)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = tickers[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
get.hist.quote(instrument = 'MMM', start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
print(tickers)
print(tickers[1])
print(tickers[2])
## download data on first stock as zoo object
z <- get.hist.quote(instrument = as.character(tickers[1]), start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(tickers[1])
## download remaining assets in for loop
for (i in 2:numTick) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = tickers[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(tickers[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## download remaining assets in for loop
for (i in 2:numTick) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", numTick , "\n")
result <- try(x <- get.hist.quote(instrument = as.character(tickers[i]),
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(tickers[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
write.zoo(z, file = "C:/Users/colon/Desktop/results.csv", index.name = "time")
## save data
write.zoo(z, file = "C:/Users/colon/Desktop/results.csv", index.name = "time")
library(zoo)
## save data
write.zoo(z, file = "C:/Users/colon/Desktop/results.csv", index.name = "time")
#add the new stock to the database
price_data <- merge(price_data, x)
install.packages("zoo")
install.packages("tseries")
library(zoo)
library(tseries)
#read ticker data in from csv as dataframe, then extract just the tickers
symbols <- read.csv(file="tickers.csv", header=TRUE, sep=",")
tickers <- symbols[,1]
#read ticker data in from csv as dataframe, then extract just the tickers
symbols <- read.csv(file="tickers.csv", header=TRUE, sep=",")
install.packages("zoo")
install.packages("zoo")
install.packages("tseries")
library(zoo)
library(tseries)
#read ticker data in from csv as dataframe, then extract just the tickers
symbols <- read.csv(file="tickers.csv", header=TRUE, sep=",")
library(zoo)
library(tseries)
#read ticker data in from csv as dataframe, then extract just the tickers
symbols <- read.csv(file="tickers.csv", header=TRUE, sep=",")
tickers <- symbols[,1]
getwd()
setwd()
this.dir <- dirname(parent.frame(2)$ofile)
setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(rstudioapi)
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#read ticker data in from csv as dataframe, then extract just the tickers
symbols <- read.csv(file="tickers.csv", header=TRUE, sep=",")
tickers <- symbols[,1]
#counts number of tickers used
numTickers <- length(tickers)
#start and end date of data pulled
startDate <- "2014-04-12"
endDate <- "2019-04-12"
#create zoo object to store historical data by doing just for the first ticker
price_data <- get.hist.quote(instrument = as.character(tickers[1]), start = startDate,
end = endDate, quote = "AdjClose",
retclass = "zoo", quiet = T)
volume_data <- get.hist.quote(instrument = as.character(tickers[1]), start = startDate,
end = endDate, quote = "Volume",
retclass = "zoo", quiet = T)
#set column name as the ticker
dimnames(price_data)[[2]] <- as.character(tickers[1])
dimnames(volume_data)[[2]] <- as.character(tickers[1])
#now that zoo object is created, loop through all tickers, saving historical data
for (i in 2:numTickers) {
#Displays what number ticker its on
cat("On company ", i, " out of ", numTickers , "\n")
#try to pull price data, if error, try again. If 2 errors, skip completely
p_data <- try(x <- get.hist.quote(instrument = as.character(tickers[i]),
start = startDate,
end = endDate, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(p_data) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(tickers[i])  #set column name to ticker
#add the new stock to the database
price_data <- merge(price_data, x)
#try to pull volume data, if error, try again. If 2 errors, skip completely
v_data <- try(y <- get.hist.quote(instrument = as.character(tickers[i]),
start = startDate,
end = endDate, quote = "Volume",
retclass = "zoo", quiet = T))
if(class(v_data) == "try-error") {
next
}
else {
dimnames(y)[[2]] <- as.character(tickers[i])  #set column name to ticker
#add the new stock to the database
volume_data <- merge(volume_data, y)
}
}
}
#write data to a csv file
write.zoo(price_data, file = "price_data.csv", index.name = "date")
write.zoo(volume_data, file = "volume_data.csv", index.name = "date")
